<?xml version="1.0" encoding="utf-8"?>
<project name="spfe-rules" basedir="." default="draft">

	<xmlcatalog id="oasis-catalogs">
		<dtd publicId="-//OASIS//DTD XML Catalogs V1.1//EN" 
			location="${SPFEOT_HOME}/1.0/schemas/catalog1.1.dtd"/>	
	</xmlcatalog>
	<xmlcatalog id="spfe-catalogs">
		<classpath>
			<fileset dir="${SPFEOT_HOME}/tools/xml-commons-resolver-1.2">
				<include name="resolver.jar"/>
			</fileset>
			<fileset dir="${SPFEOT_HOME}/tools/config">
				<include name="CatalogManager.properties"/>
			</fileset>
		</classpath>
		<catalogpath >
			<fileset 
				dir="${SPFEOT_HOME}/1.0/schemas"
				includes="**/catalog.xml"/>
			<fileset dir="${SPFEOT_HOME}/plugins" 
				includes="**/catalog.xml"/>			
			<fileset dir="${HOME}/.spfe" 
					includes="**/catalog.xml" erroronmissingdir="no"/>
<!--			<fileset 
				dir="${spfe.xml-catalog-directory}"
				includes="**/catalog.xml"/>-->
		</catalogpath>

	</xmlcatalog>

	<!-- PROPERTY DEFINITIONS -->

	<!-- properties for the temporary files used -->
	<property name="temp" value="${spfe.build.build-directory}/temp"/>
	<makeurl file="${spfe.build.build-directory}/temp" property="temp-url"/>
	<property name="output" value="${spfe.build.output-directory}"/>

	<target name="-begin-message">
		<echo/>
		<echo/>
		<echo>=====================================================</echo>
		<echo>Beginning ${ant.project.invoked-targets} build of ${spfe.topic-set-id}</echo>
		<echo>====================================================</echo>
		<echo/>
		<echo/>
	</target>

	<!-- Initialization target -->
	<target name="-init" depends="-begin-message, -recorder" description="Initialization of properties."
		unless="already-initialized">

		<!-- avoid running -init twice so we don't run the last-build-crashed test twice -->
		<property name="already-initialized" value="true"/>

		<!-- check if the last build crashed -->
		<available property="last-build-crashed" file="${temp}/incomplete.flag"/>
		<antcall target="-check-last-build-status"/>
		
		<!-- mkdir in case no link catalogs have been created - make sure file list is created correctly even if empty. -->
		<mkdir dir="${spfe.build.link-catalog-directory}"/>
		<mkdir dir="${temp}"/>
		<mkdir dir="${temp}/synthesis"/>
	</target>

	<target name="-check-last-build-status" if="last-build-crashed">
		<echo message="Last build failed. Cleaning up."/>
		<antcall target="-clean"/>
	</target>

	<!-- recorder target -->
	<target name="-recorder" if="spfe.topic-set-id">
		<echo
			message="Logging to: ${spfe.build.build-directory}/logs/${spfe.topic-set-id}.txt"/>
		<mkdir dir="${spfe.build.build-directory}/logs"/>
		<record
			name="${spfe.build.build-directory}/logs/${spfe.topic-set-id}-log.txt"
			action="start"/>
	</target>

	<!-- ============ -->
	<!-- SOURCE FILES -->
	<!-- ============ -->
	<!-- provides properties and rules for defining and fetching source files -->

	<!-- TOPICS -->
	<target name="-get.source-files.topics">
		<mkdir dir="${temp}/topics"/>
		<copy todir="${temp}/topics" preservelastmodified="true" flatten="true" verbose="true">
			<files refid="topics"/>
		</copy>
		<fileset id="topic-file-list" dir="${temp}" includes="topics/*.xml"/>
		<pathconvert dirsep="/" pathsep=";" property="topic-files" refid="topic-file-list"/>
	
		
		<!-- These echos are to test how the lists are created on each platform -->
		<!-- Note inconsistency between handling of files and fileset WRT ; vs : 
		<echo/>
		<echo>${topic-files}</echo>
		
		<property name="show-topics" refid="topics"/>
		<echo/>
		<echo>${show-topics}</echo>
		
		<files id="show-topic-file-list" includes="${temp}/topics/*.xml"/>
		<property name="show-topic-files" refid="show-topic-file-list"/>
		<echo/>
		<echo>${show-topic-files}</echo>
		
		-->
		
	</target>

	<!-- TEXT OBJECTS -->

	<target name="-get.source-files.text-objects" if="spfe.source-files.text-objects">
		<copy todir="${temp}/text-objects" preservelastmodified="true" flatten="true" verbose="true">
			<files refid="text-objects"/>
		</copy>
		<files id="text-objects-file-list" includes="${temp}/text-objects/*.xml"/>
		<property name="text-objects-files" refid="text-objects-file-list"/>
		<!-- FIXME: Make the for of the property name consistent -->
	</target>

	<!-- FRAGMENTS -->

	<target name="-get.source-files.fragments" if="spfe.source-files.fragments">
		<copy todir="${temp}/fragments" preservelastmodified="true" flatten="true" verbose="true">
			<files refid="fragments"/>
		</copy>
		<files id="fragments-file-list" includes="${temp}/fragments/*.xml"/>
		<property name="fragment-files" refid="fragments-file-list"/>
	</target>

	<!-- GRAPHICS -->

	<target name="-get.source-files.graphics-catalog">
		<copy todir="${temp}" preservelastmodified="true" flatten="true">
			<files refid="graphics-catalog"/>
		</copy>
		<basename property="graphics-catalog-file" file="${graphics-catalog}"/>
	</target>

	<!-- STRINGS -->

	<target name="-get.source-files.strings" if="spfe.source-files.strings">
		<copy todir="${temp}/strings" preservelastmodified="yes" flatten="yes" verbose="yes">
			<files refid="strings"/>
		</copy>
		<files id="strings-files" include="${temp}/strings/*.xml"/>
		<property name="strings-files-names" refid="strings-files"/>
	</target>

	<!-- LINK CATALOG -->
	<property name="link-catalog-files" refid="link-catalogs"/>


	<!-- HTML -->

	<target name="-get.externals.graphics.html"
		depends="-build.image-list-html"
		if="image-list-html-has-content">
		<mkdir dir="${output}/graphics"/>
		<copy todir="${output}/graphics" flatten="true" failonerror="true"
			preservelastmodified="true" verbose="true">
			<fileset refid="files.graphics.html"/>
		</copy>
	</target>

	<target name="-get.externals.style.html">
		<mkdir dir="${output}/style"/>
		<copy todir="${output}/style" preservelastmodified="true"
			flatten="false" failonerror="true">
			<resources refid="spfe.style.html-style-directories"/>
		</copy>
	</target>


	<!-- PDF -->

	<target name="-get.externals.style.print">
		<mkdir dir="${temp}/graphics"/>
		<copy todir="${temp}/graphics" preservelastmodified="true" verbose="yes">
			<fileset dir="${spfe.directories.fo-template.graphics}" id="files.graphics.fo-template"
			/>
		</copy>
	</target>

	<target name="-get.externals.graphics.print" depends="-build.image-list.print"
		if="image-list-print-has-content">
		<mkdir dir="${temp}/graphics"/>
		<copy todir="${temp}/graphics" flatten="true" failonerror="true" preservelastmodified="true"
			verbose="true">
			<fileset refid="files.graphics.print"/>
		</copy>
	</target>

	<!-- =========== -->
	<!-- BUILD STEPS -->
	<!-- =========== -->
	<!-- provides properties and rules for performing the build steps -->

	<!-- SYNTHESIS STEP -->


	<!-- target to build  synthesis -->
	<target name="-build.synthesis" depends="--build.synthesis"/>
	<target name="--build.synthesis" description="synthesis"
		depends="-get.source-files.topics,
					 -get.source-files.text-objects,
					 -get.source-files.fragments,
					 -get.source-files.strings">

		<!-- run the XSLT script to produce the output -->
		<xslt classpath="${SPFEOT_HOME}/tools/saxon9he/saxon9he.jar"
			style="${spfe.scripts.synthesis}" 
			in="${spfe.config-file}"
			out="${temp}/synthesis.flag">
			<xmlcatalog refid="spfe-catalogs"/>
			<param name="topic-files" expression="${topic-files}"/>
			<param name="terminate-on-error" expression="no" if="maintenance-mode"/>
			<param name="draft" expression="${draft}" if="draft"/>
			<factory name="net.sf.saxon.TransformerFactoryImpl">
				<attribute name="http://saxon.sf.net/feature/initialTemplate" value="main"/>
			</factory>
		</xslt>
	</target>
	
	<target name="-get-synthesis-file-list">
		<fileset id="synthesis-file-list" dir="${temp}" includes="synthesis/*.xml"/>
		<pathconvert dirsep="/" pathsep=";" property="synthesis-files" refid="synthesis-file-list"/>
	</target>

	<!-- LINK CATALOG STEP -->

	<!-- check if link-catalog is up to date -->

	<target name="-current.link-catalog">
		<uptodate property="-current.link-catalog"
			targetfile="${spfe.build.link-catalog-directory}/${spfe.topic-set-id}.link-catalog" srcfile="{temp}/synthesis.flag"/>
	</target>

	<!-- target for link-catalog -->
	<target name="-build.link-catalog" depends="--build.link-catalog"/>
	<target name="--build.link-catalog" description="Link catalog step."
		depends=" -build.synthesis,  -get-synthesis-file-list, -current.link-catalog"
		unless="-current.link-catalog">
		
		<!-- run the XSLT script to produce the output -->
		<xslt classpath="${SPFEOT_HOME}/tools/saxon9he/saxon9he.jar"
			in="${spfe.config-file}"
			style="${spfe.scripts.link-catalog}"
			out="${spfe.build.link-catalog-directory}/${spfe.topic-set-id}.link-catalog.xml">
			<xmlcatalog refid="spfe-catalogs"/>
			<param name="synthesis-files" expression="${synthesis-files}"/>
			<factory name="net.sf.saxon.TransformerFactoryImpl">
				<attribute name="http://saxon.sf.net/feature/initialTemplate" value="main"/>
			</factory>
		</xslt>
	</target>
	
	<!-- target for toc -->
	<target name="-build.toc" depends="--build.toc"/>
	<target name="--build.toc" description="TOC step."
		depends=" -build.synthesis, -get-synthesis-file-list, -current.link-catalog"
		unless="-current.link-catalog">
		
		<!-- run the XSLT script to produce the output -->
		<xslt classpath="${SPFEOT_HOME}/tools/saxon9he/saxon9he.jar"
			in="${spfe.config-file}"
			style="${spfe.scripts.toc}"
			out="${spfe.build.toc-directory}/${spfe.topic-set-id}.toc.xml">
			<xmlcatalog refid="spfe-catalogs"/>
			<param name="synthesis-files" expression="${synthesis-files}"/>
			<factory name="net.sf.saxon.TransformerFactoryImpl">
				<attribute name="http://saxon.sf.net/feature/initialTemplate" value="main"/>
			</factory>
		</xslt>
	</target>
	
	
	<!-- PRESENTATION WEB STEP -->


	<!-- check to see if the html-presentation is up to date -->
	<target name="-current.presentation-web">
		<uptodate property="-current.presentation-web" srcfile="${temp}/synthesis.flag" targetfile="${temp}/presentation/presentation-web.flag"/>
	</target>

	<!-- build the presentation -->
	<target name="-build.presentation-web" depends="--build.presentation-web"/>
	<target name="--build.presentation-web" description="presentation step."
		depends="-build.synthesis, 
				 -get-synthesis-file-list,
				 -build.link-catalog,
				 -build.toc,
				 -current.presentation-web, 
				 -get.source-files.graphics-catalog,
				 -get.source-files.strings"
		unless="-current.presentation-web">

		<!-- run the XSLT script to produce the output -->

		<xslt classpath="${SPFEOT_HOME}/tools/saxon9he/saxon9he.jar"
			style="${spfe.scripts.presentation-web}"
			in="${spfe.config-file}"
			out="${temp}/presentation-web.flag">
			<xmlcatalog refid="spfe-catalogs"/>
			<param name="synthesis-files" expression="${synthesis-files}"/>
			<param name="link-catalog-files" expression="${link-catalog-files}"/>

			<factory name="net.sf.saxon.TransformerFactoryImpl">
				<attribute name="http://saxon.sf.net/feature/initialTemplate" value="main"/>
			</factory>
		</xslt>
	</target>

	<!-- PRESENTATION BOOK STEP -->

	<!-- check to see if the presentation-book is up to date -->
	<target name="-current.presentation-book">
		<uptodate property="-current.presentation-book" srcfile="${temp}/synthesis.flag" targetfile="${temp}/presentation/presentation-book.flag"/>
	</target>
	
	<!-- build the book presentation -->
	<target name="-build.presentation-book" depends="--build.presentation-book"/>
	<target name="--build.presentation-book" description="book presentation step."
		depends="-build.synthesis,  -get-synthesis-file-list,
									 -current.presentation-book, 
									 -get.source-files.graphics-catalog,
									 -get.source-files.strings"
		unless="-current.presentation-book">

		<!-- run the XSLT script to produce the output -->



		<xslt classpath="${SPFEOT_HOME}/tools/saxon9he/saxon9he.jar"
			in="${spfe.config-file}" 
			style="${scripts.presentation-book}"
			out="${temp}/presentation-book.flag">
			<xmlcatalog refid="spfe-catalogs"/>
			<param name="synthesis-files" expression="${synthesis-files}"/>
			<param name="link-catalog-files" expression="${link-catalog-files}"/>
			
			<factory name="net.sf.saxon.TransformerFactoryImpl">
				<attribute name="http://saxon.sf.net/feature/initialTemplate" value="main"/>
			</factory>
		</xslt>
	</target>

	<!-- FORMAT HTML STEP -->

	<!-- check to see if the format is up to date -->
	<target name="-current.html-format">
		<uptodate property="-current.html-format" targetfile="${temp}/html-format.flag" srcfile="${temp}/presentation-web.flag"/>
	</target>

	<target name="-build.html-format" depends="--build.html-format"/>
	<target name="--build.html-format"
		depends="-build.presentation-web, 
	        	 -get.externals.graphics.html,
	        	 -get.externals.style.html,
  				 -current.html-format"
		unless="-current.html-format">

		<fileset dir="${temp}" id="presentation-file-list" includes="presentation/*.xml"/>
		<pathconvert dirsep="/" pathsep=";" property="presentation-files" refid="presentation-file-list"/>
		<pathconvert property="toc-files"  dirsep="/" pathsep=";" refid="tocs"/>	

		
		<!-- run the XSLT script to produce the output -->
		<xslt classpath="${SPFEOT_HOME}/tools/saxon9he/saxon9he.jar"
			in="${spfe.config-file}" 
			style="${spfe.scripts.format-html}" out="${temp}/html-format.flag">
			<xmlcatalog refid="spfe-catalogs"/>
			<param name="terminate-on-error" expression="no" if="maintenance-mode"/>
			<param name="presentation-files" expression="${presentation-files}"/>
			<param name="toc-files" expression="${toc-files}"/>
			<factory name="net.sf.saxon.TransformerFactoryImpl">
				<attribute name="http://saxon.sf.net/feature/initialTemplate" value="main"/>
			</factory>
		</xslt>
	</target>




	<!-- FORMAT FO STEP -->
	<!-- FIXME: Need to make sure this is non-intersecting with the web presentation files -->

	<!-- check to see if the format is up to date -->
	<target name="-current.fo-format">
		<uptodate property="-current.fo-format" targetfile="${temp}/fo-format.flag" srcfile="{temp}/presentation-book.flag"/>
	</target>

	<target name="-build.fo-format" depends="--build.fo-format"/>
	<target name="--build.fo-format" description="FO formatting"
		depends="-build.presentation-book, -current.fo-format" unless="-current.fo-format">
		
		<fileset id="presentation-file-list" dir="${temp}" includes="presentation/*.xml"/>
		<pathconvert dirsep="/" pathsep=";" property="presentation-files" refid="presentation-file-list"/>

		<pathconvert property="toc-files"  dirsep="/" pathsep=";" refid="tocs"/>	
		
		<!-- run the XSLT script to produce the output -->
		
		<xslt classpath="${SPFEOT_HOME}/tools/saxon9he/saxon9he.jar"
			in="${spfe.config-file}" 
			style="${scripts.format-fo}" out="${temp}/fo-format.flag">
			<xmlcatalog refid="spfe-catalogs"/>
			<param name="terminate-on-error" expression="no" if="maintenance-mode"/>
			<param name="presentation-files" expression="${presentation-files}"/>
			<param name="toc-files" expression="${toc-files}"/>
			<factory name="net.sf.saxon.TransformerFactoryImpl">
				<attribute name="http://saxon.sf.net/feature/initialTemplate" value="main"/>
			</factory>
		</xslt>
		
	</target>


	<!-- ENCODE PDF STEP -->

	<!-- check to see if the format is up to date -->
	<target name="-current.pdf-encode">
		<uptodate property="-current.pdf-encode"  targetfile="${output}/${spfe.pdf-name}" srcfile="{temp}/fo-format.flag"/>
	</target>

	<target name="-build.pdf-encode" depends="--build.pdf-encode"/>
	<target name="--build.pdf-encode" description="PDF encoding"
		depends=" -build.fo-format, -get.externals.graphics.print, -get.externals.style.print, -current.pdf-encode"
		unless="-current.pdf-encode">
		<!-- run the XSLT script to produce the output -->
		<!-- make sure the output directory exists -->
		<mkdir dir="${output}"/>
		<fop format="application/pdf" fofile="${temp}/spfe.fo-format.fo"
			outfile="${output}/${spfe.pdf-name}" basedir="${temp}"
			userconfig="${temp}/fop.xconf"/>
		<touch file="${temp}/pdf-format.flag"/>
	</target>


	<!-- REPORT STEP -->


	<!-- check to see if the html-presentation is up to date -->
	<target name="-current.report">
		<uptodate property="-current.presentation-web" targetfile="${output}/${spfe.report-name}" srcfile="{temp}/synthesis.flag"/>
	</target>

	<!-- build the report -->
	<target name="-build.report" description="report generation"
		depends="-build.synthesis, 
									 -get.source-files.graphics-catalog,
									 -get.source-files.strings,
									 -current.report"
		unless="-current.report">

		<xslt classpath="${SPFEOT_HOME}/tools/saxon9he/saxon9he.jar"
			in="${spfe.config-file}" style="${scripts.report}"
			out="${output}/${spfe.report-name}">
			<xmlcatalog refid="spfe-catalogs"/>
			<param name="terminate-on-error" expression="no" if="maintenance-mode"/>
			<param name="draft" expression="${draft}" if="draft"/>
			<factory name="net.sf.saxon.TransformerFactoryImpl">
				<attribute name="http://saxon.sf.net/feature/initialTemplate" value="main"/>
			</factory>
		</xslt>
	</target>


	<!-- IMAGE LIST STEP -->

	<!-- check to see if the image-list is up to date -->
	<target name="-current.image-list-html">
		<uptodate property="-current.image-list-html" targetfile="${temp}/image-list-html" srcfile="${temp}/presentation-web.flag"/>
	</target>

	<target name="-build.image-list-html"
		depends="-build.presentation-web, -get.source-files.graphics-catalog, -current.image-list-html"
		unless="-current.image-list-html">
		
		<xslt classpath="${SPFEOT_HOME}/tools/saxon9he/saxon9he.jar"
			in="${spfe.config-file}" style="${spfe.scripts.image-list}"
			out="${temp}/image-list-html">
			<xmlcatalog refid="spfe-catalogs"/>
			<param name="synthesis-files" expression="${synthesis-files}"/>
			<param name="terminate-on-error" expression="no" if="maintenance-mode"/>
			<param name="graphics-catalog-file" expression="${graphics-catalog-file}"/>
			<factory name="net.sf.saxon.TransformerFactoryImpl">
				<attribute name="http://saxon.sf.net/feature/initialTemplate" value="main"/>
			</factory>
		</xslt>
<!--		<fileset id="files.graphics.html" dir="${spfe.directories.image-source}"
			includesfile="${temp}/image-list-html"/>-->
		<condition property="image-list-html-has-content">
			<isfileselected file="${temp}/image-list-html">
				<containsregexp expression="\S+"/>
			</isfileselected>
		</condition>
	</target>

	<!-- check to see if the format is up to date -->
	<target name="-current.image-list.print">
		<uptodate property="-current.image-list.print" targetfile="${temp}/image-list-print" srcfile="{temp}/presentation-book.flag"/>
	</target>

	<target name="-build.image-list.print"
		depends="-build.presentation-book, -get.source-files.graphics-catalog, -current.image-list.print"
		unless="-current.image-list.print">
		<xslt classpath="${SPFEOT_HOME}/tools/saxon9he/saxon9he.jar"
			in="${spfe.config-file}" style="${spfe.scripts.image-list}"
			out="${temp}/image-list-print">
			<xmlcatalog refid="spfe-catalogs"/>
			<param name="synthesis-files" expression="${synthesis-files}"/>
			<param name="terminate-on-error" expression="no" if="maintenance-mode"/>
			<param name="graphics-catalog-file" expression="${graphics-catalog-file}"/>
			<param name="vector-if-available" expression="yes"/>
			<factory name="net.sf.saxon.TransformerFactoryImpl">
				<attribute name="http://saxon.sf.net/feature/initialTemplate" value="main"/>
			</factory>
		</xslt>
<!--		<fileset id="files.graphics.print" dir="${spfe.directories.image-source}"
			includesfile="${temp}/image-list-print"/>-->
		<condition property="image-list-print-has-content">
			<isfileselected file="${temp}/image-list-print">
				<containsregexp expression="\S+"/>
			</isfileselected>
		</condition>
	</target>

	<!--===============-->
	<!-- USER COMMANDS -->
	<!--===============-->

	<!-- ZIP -->
	<target name="zip" depends="-init">
		<antcall target="-zip"/>
	</target>

<!--	<target name="-zip" depends="-final, pdf">
		<mkdir dir="${spfe.directories.output.zip}"/>
		<basename property="zip-prefix" file=""/>
		<echo message="Zipping ${output}"/>
		<zip destfile="${spfe.directories.output.zip}/${spfe.zip-file-name}">
			<zipfileset dir="${output}" prefix="${zip-prefix}"/>
		</zip>
	</target>
-->

	<!-- DRAFT -->
	<target name="draft" depends="-init">
		<touch file="${temp}/incomplete.flag" mkdirs="true"/>
		<antcall target="-draft"/>
		<delete file="${temp}/incomplete.flag"/>
	</target>

	<target name="-draft" depends="-draft-flag, -final" description="Build the draft online output."/>

	<target name="-draft-flag">
		<!-- this is a separate rule to ensure it runs before -final -->
		<property name="draft" value="yes"/>
		<touch file="${temp}/draft.flag" mkdirs="true"/>
	</target>

	<!-- FINAL -->
	<target name="final" depends="-init, -final"/>
	<target name="-final" depends="-force-clean, -build.html-format"
		description="Build the final online output."/>

	<target name="-force-clean" description="Force clean before final build" depends="-is-draft"
		if="is-draft" unless="draft">
		<antcall target="-clean"/>
	</target>

	<target name="-is-draft">
		<available property="is-draft" file="${temp}/draft.flag"/>
	</target>

	<!-- CLEAN -->
	<target name="clean" depends="-init, -clean"/>

	<target name="-clean" description="Clean temp and output files.">
		<delete dir="${temp}"/>
		<delete dir="${output}"/>
	</target>

	<!-- WIP -->
	<target name="wip" depends="-init, draft, pdf, -wip"/>
	<target name="-wip" description="Copy content to the work in progress website">
		<!-- FIXME: Set failonerror to "no" to solve problems with non-SPFE things where there is nothing to copy. May be a better way to handle this. -->
		<copy todir="${spfe.directories.internal-web}" preservelastmodified="true" failonerror="no">
			<fileset dir="${output}"/>
		</copy>
	</target>

	<!-- CAT -->
	<!-- Is all this antcall stuff needed, or will a simple dependency do? -->
	<target name="cat" depends="-init">
		<touch file="${temp}/incomplete.flag" mkdirs="true"/>
		<antcall target="-cat"/>
		<delete file="${temp}/incomplete.flag"/>
	</target>
	
	<target name="-cat" description="Build all the link catalogs">
		<antcall target="-build.link-catalog"/>
	</target>
	
	<!-- TOC -->
	<target name="toc" depends="-init">
		<touch file="${temp}/incomplete.flag" mkdirs="true"/>
		<antcall target="-toc"/>
		<delete file="${temp}/incomplete.flag"/>
	</target>
	
	<target name="-toc" description="Build all tocs">
		<antcall target="-build.toc"/>
	</target>
	
	<!-- REPORT -->
	<target name="report" depends="-init">
		<touch file="${temp}/incomplete.flag" mkdirs="true"/>
		<antcall target="-report"/>
		<delete file="${temp}/incomplete.flag"/>
	</target>

	<target name="-report" description="Build all the report">
		<antcall target="-build.report"/>
	</target>

	<!-- PDF -->
	<target name="pdf" depends="-init, -pdf-skipped-message" description="Build the PDF output."
		if="spfe.pdf">
		<antcall target="-build.pdf-encode"/>
	</target>

	<target name="-pdf-skipped-message" unless="spfe.pdf">
		<echo message="PDF generation skipped because property spfe.pdf is not set."/>
	</target>

	<target name="test-mail">
		<property name="test-message"
			value="Congratulations ${spfe.mail.from}, you have successfully set up your environment to enable the SPFE build to send mail."/>
		<antcall target="-send-mail">
			<param name="spfe.mail.to" value="${spfe.mail.from}"/>
			<param name="mail.subject" value="Test message"/>
			<param name="mail.message" value="${test-message}"/>
		</antcall>
	</target>

	<target name="-send-mail">
		<mail mailhost="${spfe.mail.smtp.server}" mailport="${spfe.mail.smtp.port}"
			subject="${mail.subject}" encoding="plain">
			<from address="${spfe.mail.from}"/>
			<replyto address="${spfe.mail.from}"/>
			<to address="${spfe.mail.to}"/>
			<message>${mail.message}</message>
		</mail>
	</target>
</project>
